
def ord_insercion(lista):
    """ Ordena una lista de elementos según el método de inserción.
        Pre: los elementos de la lista deben ser comparables.
        Post: la lista está ordenada. """

    # i va desde la primera hasta la penúltima posición de la lista
    for i in range(len(lista)-1):
        # Si el elemento de la posición i+1 está desordenado respecto
        # al de la posición i, reubicarlo dentro del segmento (0:i]
        if lista[i+1]< lista[i]:
            reubicar(lista, i+1)

        print ("DEBUG: ", lista)

def reubicar(lista, p):
    """ Reubica al elemento que está en la posición p de la lista
        dentro del segmento (0:p-1].
        Pre: p tiene que ser una posicion válida de lista. """

    # v es el valor a reubicar
    v = lista[p]

    # Recorre el segmento (0:p-1] de derecha a izquierda hasta
    # encontrar la posición j tal que lista(j-1] <= v < lista(j].
    j = p
    while j > 0 and v < lista[j-1]:
        # Desplaza los elementos hacia la derecha, dejando lugar
        # para insertar el elemento v donde corresponda.
        lista[j] = lista[j-1]
        # Se mueve un lugar a la izquierda
        j -= 1

    # Ubica el valor v en su nueva posición
    lista[j] = v

if __name__ == '__main__':
    l=[3, 2,-1,5, 0, 2]
    ord_insercion(l)
    print(l)




"""

Invariante del ordenamiento por inserción

En el ordenamiento por inserción, a cada paso se considera que los elementos que se encuentran en el segmento de 0 a i están ordenados, 
de manera que agregar un nuevo elemento implica colocarlo en la posición correspondiente y el segmento seguirá ordenado.


¿Cuánto cuesta ordenar por inserción?
Del código se puede ver que la función principal avanza por la lista de izquierda a derecha, mientras que la función reubicar cambia los elementos de 
lugar de derecha a izquierda.

Lo peor que le puede pasar a un elemento que está en la posición j es que deba ser ubicado al principio de la lista. Y lo peor que le puede 
pasar a una lista es que todos sus elementos deban ser reubicados.

Por ejemplo, en la lista [10, 8, 6, 2, -2, -5], todos los elementos deben ser reubicados al principio de la lista.

En el primer paso, el segundo elemento se debe intercambiar con el primero; en el segundo paso, el tercer elemento se compara con el segundo y 
el primer elemento, y se ubica adelante de todo; en el tercer paso, el cuarto elemento se compara con el tercero, el segundo y el primer elemento, 
y se ubica adelante de todo; etc...

    T(N) = c * (2 + 3 + . . . + N ) = c * N * (N + 1)/2 = N^2

Es decir que ordenar por inserción una lista de tamaño N puede insumir (en el peor caso) tiempo del orden de N^2. En cuanto al espacio utilizado, 
nuevamente sólo se tiene en memoria la lista que se desea ordenar y algunas variables de tamaño 1.



Inserción en una lista ordenada
Sin embargo, algo interesante a notar es que cuando la lista se encuentra ordenada, este algoritmo no hace ningún movimiento de elementos, 
implemente compara cada elemento con el anterior, y si es mayor sigue adelante.

Es decir que para el caso de una lista de N elementos que se encuentra ordenada, el tiempo que insume el algoritmo de inserción es:

    T(N) = N

"""
